[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "point_in_polygon"
version = "0.1.0"
description = "Point in polygon to replace ArcGIS calling"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
    { name = "Jean Philippe Wan", email = "jeanphilippe.wan@statcan.gc.ca" }
]
license = { text = "MIT" }
keywords = ["Point in Polygon", "GIS"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
urls = {
    "Homepage" = "https://github.com/username/point_in_polygon"
    "Repository" = "https://github.com/username/point_in_polygon"
    "Documentation" = "https://point_in_polygon.readthedocs.io"
    "Bug Tracker" = "https://github.com/username/point_in_polygon/issues"
}
requires-python = ">=3.9, <4.0"
dependencies = [
    "cx-Oracle^8.3.0",  
    "geopandas^0.14.4",  
    "keyring^25.2.0",  
    "pandas^2.2.2",  
    "pydantic^2.6.1",  
    "pyproj^3.6.1",  
    "shapely^2.0.4",  
    "SQLAlchemy^2.0.30",  
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.0.284",
    "mypy>=1.5.0"
]
# You can add more optional groups, such as "docs", "testing", etc.

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q --cov=your_package --cov-report=term-missing"

[tool.ruff]
# Select categories of linting rules:
# E: PyCQA's pycodestyle errors
# F: PyCQA's pyflakes errors
# B: Bugbear linter (additional error checks)
# I: Import-related rules
select = ["E", "F", "B", "I"]

# Ignore specific rules that may not align with project preferences:
# E203: Whitespace before ':' (conflicts with black formatting)
# E501: Line length (handled separately via 'line-length')
ignore = ["E203", "E501"]

# Maximum allowed line length
line-length = 120

# Target Python versions for syntax and feature support
target-version = ["py39", "py310", "py311", "py312", "py313"]

# Directories to exclude from linting
exclude = ["venv/", "build/", "dist/"]  # Exclude virtual environments and build artifacts

[tool.mypy]
# mypy does not natively support specifying multiple Python versions.
# Instead, set the minimum version and ensure type annotations are compatible across all target versions.
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
strict = true  # Enable all strict optional checks
ignore_missing_imports = true  # Useful if some dependencies lack type hints

[project.scripts]
# Define command-line scripts, e.g.,
# mycli = "your_package.cli:main"

# Optionally, include entry points if your project provides plugins or extensions
# [project.entry-points."console_scripts"]
# mycli = "your_package.cli:main"

[tool.coverage.report]
# Configure coverage reporting if using coverage.py directly
# omit = ["tests/*"]

# Optionally, add other tool configurations here
